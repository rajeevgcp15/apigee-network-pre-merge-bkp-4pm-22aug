# Import common-functions/tfplan-functions/tfplan-functions.sentinel
# with alias "plan"
import "tfconfig-functions" as tfconfig
import "tfplan/v2" as tfplan2
import "tfplan-functions" as plan
import "strings"
import "types"

# Get all Apigee Organization
allApigeeOrganizationTfplan = plan.find_resources("google_apigee_organization")
allApigeeOrganizationTfconfig = tfconfig.find_resources_by_type("google_apigee_organization")
allApigeeNetworks = plan.find_resources("google_compute_network")
allProviders = tfconfig.find_all_providers()

//allVariables = plan.find_all_variables()

find_all_variables = func() {
	return tfplan2.variables
}
allVariables = find_all_variables()
//print(allVariables)

tfconfig_org_name_network_map = {}
for allApigeeOrganizationTfconfig as address, rc {
	a_network_tfcon = tfconfig.evaluate_attribute(rc.config.authorized_network, "references")
	name_tfcon = tfconfig.evaluate_attribute(rc, "name")
	net_name = strings.split(a_network_tfcon[0], ".")
	tfconfig_org_name_network_map[name_tfcon] = net_name[1]
}

print("tfconfig_org_name_network_map:==>" + plan.to_string(tfconfig_org_name_network_map))

#============network project map=============
tfplan_network_project_map = {}
for allApigeeNetworks as address, rc {
	network_project_name = plan.evaluate_attribute(rc, "project")
	network_name_var = rc.address
	network_name_add = strings.split(network_name_var, ".")
	network_name = network_name_add[1]
	if (types.type_of(network_project_name) is "undefined" or types.type_of(network_project_name) is "null") {
		provider_name = rc.provider_name
		provider_arr = strings.split(provider_name, "/")
		provider = provider_arr[2]
		print(provider)
		for allProviders as add, rt {
			if (add == provider) {
				project_id = rt.config.project
				print(project_id)
				project_name = project_id.constant_value

				if (types.type_of(project_name) is "undefined") {
					p_name = project_id.references[0]
					print(p_name)
					p_name_arr = strings.split(p_name, ".")
					p_name_var = p_name_arr[1]
					for allVariables as ad, rtt {
						if (ad == p_name_var) {
							project_name = rtt.value
							print("Var project :==>" + plan.to_string(project_name))
							tfplan_network_project_map[network_name] = project_name
						}
					}
				} else {

					tfplan_network_project_map[network_name] = project_name

				}

			}
		}

	} else {
        tfplan_network_project_map[network_name] = network_project_name
    }
}

print("tfplan_network_project_map: ==> " + plan.to_string(tfplan_network_project_map))

#============================================

#=======org name --> project map ============
tfplan_org_project_map = {}
for allApigeeOrganizationTfplan as address, rc {
	add_org = rc.address
	add_org_arr = strings.split(add_org, ".")
	add_org_main = add_org_arr[1]
	//print("hhhhahhahhaha:==>" + plan.to_string(add_org_main))
	project_org = plan.evaluate_attribute(rc, "project_id")
	tfplan_org_project_map[add_org_main] = project_org

}
print("tfplan_org_project_map ==> " + plan.to_string(tfplan_org_project_map))

#============================================
messages_apigee_auth_net = {}
for allApigeeOrganizationTfplan as address, rc {

	apigee_auth_net = plan.evaluate_attribute(rc, "authorized_network")
	org_project = plan.evaluate_attribute(rc, "project_id")
	//print(apigee_auth_net)
	if (types.type_of(apigee_auth_net) == "null" or types.type_of(apigee_auth_net) == "undefined") {
		apigee_auth_net_unknown_after = plan.evaluate_attribute(rc.change.after_unknown, "authorized_network")

		if (types.type_of(apigee_auth_net_unknown_after) == "null" or types.type_of(apigee_auth_net_unknown_after) == "undefined") {
			print("Authorized network not defined for resource: " + address)
			messages_apigee_auth_net[address] = rc
		} else {
			add_org = rc.address
			add_org_arr = strings.split(add_org, ".")
			add_org_main = add_org_arr[1]
			apigee_org_project = tfplan_org_project_map[add_org_main]
			apigee_org_network_project = tfplan_network_project_map[tfconfig_org_name_network_map[add_org_main]]
            print("OP:"+plan.to_string(apigee_org_project))
			print("ON:"+plan.to_string(apigee_org_network_project))
			if (apigee_org_project == apigee_org_network_project) {
				print("H2:The ORG project and Network Project can't be Same for resource: " + address)
				messages_apigee_auth_net[address] = rc
			}
		}

	} else {
		org_auth_network_arr = strings.split(apigee_auth_net, "/")
		org_auth_network = org_auth_network_arr[1]
		print("Auth Network Present :==> " + plan.to_string(org_auth_network))
        print("ORG Project: ==> "+plan.to_string(org_project))
		if org_project == org_auth_network {
			print("H1:The ORG project and Network Project can't be Same for resource: " + address)
			messages_apigee_auth_net[address] = rc
		}

	}

}
GCP_APIGEE_NETWORK = rule {length(messages_apigee_auth_net) is 0}

main = rule { GCP_APIGEE_NETWORK }
